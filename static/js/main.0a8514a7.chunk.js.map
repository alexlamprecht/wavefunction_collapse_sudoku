{"version":3,"sources":["Board.js","App.js","reportWebVitals.js","index.js"],"names":["Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","randomDataIndex","Math","floor","random","sudoku","data","length","state","initializeboardState","hasHelp","dataIndex","undefined","cells","split","map","c","isActive","parseInt","value","isInitial","allowedNumbers","Array","from","_","i","toConsumableArray","keys","setState","cellNumber","column","row","blockColumn","blockRow","foundNumbers","Set","x","add","y","index","has","push","activeState","updateCells","computeAllowedNumbers","react_default","a","createElement","Board_Cell","key","concat","number","_this2","renderCell","className","type","id","defaultChecked","onChange","toggleHelp","for","onClick","e","resetInitialIndex","Component","Cell","_this3","target","_this4","numbers","_loop","find","element","renderNumber","current_state","React","App","src_Board_0","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0a8514a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Board.css\";\nimport sudoku from \"./sudoku_data.json\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    let randomDataIndex = Math.floor(Math.random() * sudoku.data.length);\n    this.randomDataIndex = randomDataIndex;\n    this.state = this.initializeboardState(randomDataIndex);\n    this.state.hasHelp = true;\n  }\n\n  initializeboardState(dataIndex) {\n    if (dataIndex !== undefined) {\n      return {\n        cells: sudoku.data[dataIndex].split(\"\").map((c) => {\n          return {\n            isActive: parseInt(c) > 0 ? true : false,\n            value: parseInt(c),\n            isInitial: parseInt(c) > 0 ? true : false,\n            allowedNumbers: [],\n          };\n        }),\n      };\n    }\n    return {\n      cells: Array.from({ length: 81 }, (_, i) => {\n        return {\n          isActive: false,\n          value: 0,\n          isInitial: false,\n          allowedNumbers: [...Array(10).keys()],\n        };\n      }),\n    };\n  }\n\n  resetInitialIndex() {\n    let randomDataIndex = Math.floor(Math.random() * sudoku.data.length);\n    this.randomDataIndex = randomDataIndex;\n    this.setState(this.initializeboardState(randomDataIndex));\n  }\n\n  computeAllowedNumbers(cellNumber) {\n    if (!this.state) {\n      return Array.from({ length: 9 }, (_, i) => i + 1);\n    }\n    const column = cellNumber % 9;\n    const row = Math.floor(cellNumber / 9);\n    const blockColumn = Math.floor(column / 3);\n    const blockRow = Math.floor(row / 3);\n\n    const foundNumbers = new Set();\n\n    for (let x = 0; x < 9; x++) {\n      foundNumbers.add(parseInt(this.state.cells[row * 9 + x].value));\n    }\n\n    for (let x = 0; x < 9; x++) {\n      foundNumbers.add(parseInt(this.state.cells[column + 9 * x].value));\n    }\n\n    for (let x = 0; x < 3; x++) {\n      for (let y = 0; y < 3; y++) {\n        foundNumbers.add(\n          parseInt(\n            this.state.cells[blockRow * 9 * 3 + blockColumn * 3 + x + 9 * y]\n              .value\n          )\n        );\n      }\n    }\n\n    const allowedNumbers = [];\n    for (let index = 1; index <= 9; index++) {\n      if (!foundNumbers.has(index)) allowedNumbers.push(index);\n    }\n    return allowedNumbers;\n  }\n\n  handleChange(cellNumber, activeState, value) {\n    const updateCells = this.state.cells;\n\n    updateCells[cellNumber] = {\n      isActive: activeState,\n      value,\n    };\n    this.setState({ cells: updateCells });\n  }\n\n  toggleHelp() {\n    this.setState({ hasHelp: !this.state.hasHelp });\n  }\n\n  renderCell(i) {\n    const allowedNumbers = this.computeAllowedNumbers(i);\n    return (\n      <Cell\n        key={`Cell-${i}`}\n        number={i}\n        isActive={this.state.cells[i].isActive}\n        isInitial={this.state.cells[i].isInitial}\n        value={this.state.cells[i].value}\n        allowedNumbers={allowedNumbers}\n        hasHelp={this.state.hasHelp}\n        handleChange={this.handleChange}\n      />\n    );\n  }\n\n  render() {\n    const cells = [];\n    for (let i = 0; i < 81; i++) {\n      cells.push(this.renderCell(i));\n    }\n    return (\n      <div className=\"BoardContainer\">\n        <div className=\"Board\"> {cells}</div>\n\n        <div className=\"UIContainer\">\n          <div className=\"helpToggle UIButton\">\n            <input\n              type=\"checkbox\"\n              id=\"switch\"\n              defaultChecked={this.state.hasHelp}\n              onChange={() => this.toggleHelp()}\n            />\n            <label for=\"switch\">Help</label>\n          </div>\n\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.setState(this.resetInitialIndex());\n            }}\n          >\n            random\n          </button>\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.setState(this.initializeboardState(this.randomDataIndex));\n            }}\n          >\n            reset\n          </button>\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.setState(this.initializeboardState());\n            }}\n          >\n            empty\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActive: props.isActive,\n      number: props.number,\n      allowedNumbers: props.allowedNumbers,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  static getDerivedStateFromProps(props, current_state) {\n    return {\n      isActive: props.isActive,\n      number: props.value,\n      allowedNumbers: props.allowedNumbers,\n    };\n  }\n\n  handleChange(e) {\n    if (!this.props.isInitial) {\n      this.props.handleChange(\n        this.props.number,\n        !this.state.isActive,\n        e.target.value\n      );\n    }\n  }\n\n  renderNumber(cellNumber, i) {\n    return (\n      <button\n        className={`${\n          this.props.hasHelp && this.state.allowedNumbers.length === 1\n            ? \"highlight\"\n            : \"\"\n        }`}\n        key={`CellNumber-${cellNumber}-${i}`}\n        value={i + 1}\n        onClick={this.handleChange}\n      >\n        {i + 1}\n      </button>\n    );\n  }\n\n  render() {\n    if (this.state.isActive) {\n      return (\n        <button\n          className={`Cell Number ${this.state.isActive ? \"active\" : \"\"} ${\n            this.props.isInitial ? \"initial\" : \"\"\n          }`}\n          value={0}\n          onClick={this.handleChange}\n        >\n          {this.props.value}\n        </button>\n      );\n    }\n    if (this.props.hasHelp && this.state.allowedNumbers.length === 0) {\n      return (\n        <button className={`Cell Error`} value={0}>\n          {\"!\"}\n        </button>\n      );\n    }\n    const numbers = [];\n    for (let i = 0; i < 9; i++) {\n      if (\n        !this.props.hasHelp ||\n        this.state.allowedNumbers.find((element) => element === i + 1)\n      ) {\n        numbers.push(this.renderNumber(this.props.number, i));\n      } else {\n        numbers.push(<div className=\"emptyButton\"></div>);\n      }\n    }\n\n    return (\n      <div className={`Cell ${this.state.isActive ? \"active\" : \"\"} `}>\n        {numbers}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import \"./App.css\";\nimport React from \"react\";\n\nimport Board from \"./Board\";\n\nfunction App() {\n  // const [todos, setTodos] = React.useState([\"item 1\", \"item 2\", \"item 3\"]);\n  return (\n    <div className=\"App\">\n      <Board />\n      {/* <TodoCount todos={todos} />\n      <TodoList todos={todos} />\n      <AddTodo setTodos={setTodos} /> */}\n    </div>\n  );\n}\n\n// function AddTodo({ setTodos }) {\n//   function handleSubmit(event) {\n//     event.preventDefault();\n//     const todo = event.target.elements.todo.value;\n//     setTodos((prevTodos) => [...prevTodos, todo]);\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <input type=\"text\" id=\"todo\" />\n//       <button type=\"submit\">Add Todo</button>\n//     </form>\n//   );\n// }\n\n// function TodoCount({ todos }) {\n//   return <div>Total Todos: {todos.length}</div>;\n// }\n\n// function TodoList({ todos }) {\n//   return (\n//     <ul>\n//       {todos.map((todo) => (\n//         <li key={todo}>{todo}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}