{"version":3,"sources":["Board.js","index.js"],"names":["Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","randomDataIndex","Math","floor","random","sudoku","data","length","state","initializeboardState","computeAllowedNumbersForAllCells","cells","computeAllowedNumbersFreqForAllCells","hasHelp","dataIndex","undefined","console","log","split","map","c","isActive","parseInt","value","isInitial","allowedNumbers","Set","allowedNumbersFreqEqOne","Array","from","_","i","setState","forEach","cell","cellNumber","column","row","blockColumn","blockRow","foundNumbers","x","add","y","index","has","_this2","newCells","computeAllowedNumbers","push","foundAllowedNumbersFreqHor","fill","foundAllowedNumbersFreqVert","foundAllowedNumbersFreqBlock","an","cellIndex","foundAllowedNumbersFreqEqOne","e","computeAllowedNumbersFreqEqOne","activeState","updateCells","react_default","a","createElement","Board_Cell","key","concat","number","_this3","renderCell","className","type","id","defaultChecked","onChange","toggleHelp","for","onClick","loadRandomSudokuFromData","resetToInitial","makeInitial","Component","Cell","_this4","handleClickOnNumber","val","v","numbers","size","Board_Error","isProtected","isHidden","isHightlight","Board_Number","handleClick","current_state","React","Error","Number","_this5","renderNumber","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_Board_0"],"mappings":"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","file":"static/js/main.53330248.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Board.css\";\nimport sudoku from \"./sudoku_data.json\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    let randomDataIndex = Math.floor(Math.random() * sudoku.data.length);\n    this.randomDataIndex = randomDataIndex;\n    this.state = this.initializeboardState(randomDataIndex);\n    this.computeAllowedNumbersForAllCells(this.state.cells);\n    this.computeAllowedNumbersFreqForAllCells(this.state.cells);\n    this.state.hasHelp = true;\n  }\n\n  initializeboardState(dataIndex) {\n    if (dataIndex !== undefined) {\n      console.log(\"Sudoku\", dataIndex, \"loaded succesfully!\");\n      return {\n        cells: sudoku.data[dataIndex].split(\"\").map((c) => {\n          return {\n            isActive: parseInt(c) > 0,\n            value: parseInt(c),\n            isInitial: parseInt(c) > 0,\n            allowedNumbers: new Set(),\n            allowedNumbersFreqEqOne: new Set(),\n          };\n        }),\n      };\n    }\n    return {\n      cells: Array.from({ length: 81 }, (_, i) => {\n        return {\n          isActive: false,\n          value: 0,\n          isInitial: false,\n          allowedNumbers: new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]),\n          allowedNumbersFreqEqOne: new Set(),\n        };\n      }),\n    };\n  }\n\n  loadRandomSudokuFromData() {\n    let randomDataIndex = Math.floor(Math.random() * sudoku.data.length);\n    this.randomDataIndex = randomDataIndex;\n    let cells = this.initializeboardState(randomDataIndex).cells;\n    cells = this.computeAllowedNumbersForAllCells(cells);\n    cells = this.computeAllowedNumbersFreqForAllCells(cells);\n    this.setState({ cells: cells });\n  }\n\n  resetToInitial() {\n    let cells = this.state.cells;\n    cells.forEach((cell) => {\n      if (!cell.isInitial) {\n        cell.value = 0;\n        cell.isActive = false;\n      }\n    });\n    cells = this.computeAllowedNumbersForAllCells(cells);\n    cells = this.computeAllowedNumbersFreqForAllCells(cells);\n    this.setState({ cells: cells });\n  }\n\n  makeInitial() {\n    let cells = this.state.cells;\n    cells.forEach((cell) => {\n      if (cell.isActive) {\n        cell.isInitial = true;\n      }\n    });\n    cells = this.computeAllowedNumbersForAllCells(cells);\n    cells = this.computeAllowedNumbersFreqForAllCells(cells);\n    this.setState({ cells: cells });\n  }\n\n  computeAllowedNumbers(cellNumber, cells) {\n    if (!this.state) {\n      return Array.from({ length: 9 }, (_, i) => i + 1);\n    }\n    const column = cellNumber % 9;\n    const row = Math.floor(cellNumber / 9);\n    const blockColumn = Math.floor(column / 3);\n    const blockRow = Math.floor(row / 3);\n\n    const foundNumbers = new Set();\n\n    for (let x = 0; x < 9; x++) {\n      foundNumbers.add(parseInt(cells[row * 9 + x].value));\n      foundNumbers.add(parseInt(cells[column + 9 * x].value));\n    }\n\n    for (let x = 0; x < 3; x++) {\n      for (let y = 0; y < 3; y++) {\n        foundNumbers.add(\n          parseInt(cells[blockRow * 9 * 3 + blockColumn * 3 + x + 9 * y].value)\n        );\n      }\n    }\n\n    const allowedNumbers = new Set();\n    for (let index = 1; index <= 9; index++) {\n      if (!foundNumbers.has(index)) allowedNumbers.add(index);\n    }\n    return allowedNumbers;\n  }\n\n  computeAllowedNumbersForAllCells(cells) {\n    const newCells = [];\n    cells.forEach((cell, index) => {\n      cell.allowedNumbers = this.computeAllowedNumbers(index, cells);\n\n      newCells.push(cell);\n    });\n    return newCells;\n  }\n\n  computeAllowedNumbersFreqEqOne(cellNumber, cells) {\n    const foundAllowedNumbersFreqHor = new Array(10).fill(0);\n    const foundAllowedNumbersFreqVert = new Array(10).fill(0);\n    const foundAllowedNumbersFreqBlock = new Array(10).fill(0);\n    if (cells[cellNumber].isActive) return new Set();\n    const column = cellNumber % 9;\n    const row = Math.floor(cellNumber / 9);\n    const blockColumn = Math.floor(column / 3);\n    const blockRow = Math.floor(row / 3);\n\n    cells[cellNumber].allowedNumbers.forEach((an) => {\n      for (let x = 0; x < 9; x++) {\n        let cellIndex = row * 9 + x;\n\n        if (\n          !cells[cellIndex].isActive &&\n          cells[cellIndex].allowedNumbers.has(an)\n        )\n          foundAllowedNumbersFreqHor[an]++;\n\n        cellIndex = column + 9 * x;\n\n        if (\n          !cells[cellIndex].isActive &&\n          cells[cellIndex].allowedNumbers.has(an)\n        )\n          foundAllowedNumbersFreqVert[an]++;\n      }\n\n      for (let x = 0; x < 3; x++) {\n        for (let y = 0; y < 3; y++) {\n          let cellIndex = blockRow * 9 * 3 + blockColumn * 3 + x + 9 * y;\n\n          if (\n            !cells[cellIndex].isActive &&\n            cells[cellIndex].allowedNumbers.has(an)\n          )\n            foundAllowedNumbersFreqBlock[an]++;\n        }\n      }\n    });\n    const foundAllowedNumbersFreqEqOne = new Set();\n    foundAllowedNumbersFreqHor.map((e, i) => {\n      if (e === 1) return foundAllowedNumbersFreqEqOne.add(i);\n    });\n    foundAllowedNumbersFreqVert.map((e, i) => {\n      if (e === 1) return foundAllowedNumbersFreqEqOne.add(i);\n    });\n    foundAllowedNumbersFreqBlock.map((e, i) => {\n      if (e === 1) return foundAllowedNumbersFreqEqOne.add(i);\n    });\n\n    return foundAllowedNumbersFreqEqOne;\n  }\n\n  computeAllowedNumbersFreqForAllCells(cells) {\n    const newCells = [];\n    for (let c = 0; c < cells.length; c++) {\n      let cell = cells[c];\n      cell.allowedNumbersFreqEqOne = this.computeAllowedNumbersFreqEqOne(\n        c,\n        cells\n      );\n      newCells.push(cell);\n    }\n    return newCells;\n  }\n\n  handleChange(cellNumber, activeState, value) {\n    const updateCells = this.state.cells;\n\n    updateCells[cellNumber] = {\n      isActive: activeState,\n      value,\n    };\n    this.setState({ cells: updateCells });\n    this.computeAllowedNumbersForAllCells(this.state.cells);\n    this.computeAllowedNumbersFreqForAllCells(this.state.cells);\n  }\n\n  toggleHelp() {\n    this.setState({ hasHelp: !this.state.hasHelp });\n  }\n\n  renderCell(i) {\n    return (\n      <Cell\n        key={`Cell-${i}`}\n        number={i}\n        isActive={this.state.cells[i].isActive}\n        isInitial={this.state.cells[i].isInitial}\n        value={this.state.cells[i].value}\n        allowedNumbers={this.state.cells[i].allowedNumbers}\n        allowedNumbersFreqEqOne={this.state.cells[i].allowedNumbersFreqEqOne}\n        // allowedNumbersFreqEqOne\n        hasHelp={this.state.hasHelp}\n        handleChange={this.handleChange}\n      />\n    );\n  }\n\n  render() {\n    const cells = [];\n    for (let i = 0; i < 81; i++) {\n      cells.push(this.renderCell(i));\n    }\n    return (\n      <div className=\"BoardContainer\">\n        <div className=\"Board\"> {cells}</div>\n\n        <div className=\"UIContainer\">\n          <div className=\"helpToggle UIButton\">\n            <input\n              type=\"checkbox\"\n              id=\"switch\"\n              defaultChecked={this.state.hasHelp}\n              onChange={() => this.toggleHelp()}\n            />\n            <label for=\"switch\">Help</label>\n          </div>\n\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.loadRandomSudokuFromData();\n            }}\n          >\n            random\n          </button>\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.resetToInitial();\n            }}\n          >\n            reset\n          </button>\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.setState(this.initializeboardState());\n            }}\n          >\n            empty\n          </button>\n          <button\n            className=\"UIButton\"\n            onClick={(e) => {\n              this.makeInitial();\n            }}\n          >\n            make initial\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActive: props.isActive,\n      value: props.value,\n      number: props.number,\n      allowedNumbers: props.allowedNumbers,\n      allowedNumbersFreqEqOne: props.allowedNumbersFreqEqOne,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickOnNumber = this.handleClickOnNumber.bind(this);\n  }\n  static getDerivedStateFromProps(props, current_state) {\n    return {\n      isActive: props.isActive,\n      value: props.value,\n      allowedNumbers: props.allowedNumbers,\n      allowedNumbersFreqEqOne: props.allowedNumbersFreqEqOne,\n    };\n  }\n\n  handleChange(val) {\n    if (this.props.isActive) {\n      return this.props.handleChange(this.props.number, false, 0);\n    }\n    return this.props.handleChange(this.props.number, true, val);\n  }\n\n  handleClickOnNumber(v) {\n    this.handleChange(v);\n  }\n\n  render() {\n    const numbers = [];\n    if (this.state.allowedNumbers.size === 0 && !this.state.isActive) {\n      return (\n        <div className={`Cell`}>\n          <Error></Error>\n        </div>\n      );\n    }\n    for (let i = 0; i < 9; i++) {\n      const isActive = this.state.value === i + 1;\n      const isProtected = this.state.value === i + 1 && this.props.isInitial;\n      const isHidden =\n        (this.state.isActive && this.state.value !== i + 1) ||\n        (!this.state.isActive &&\n          this.props.hasHelp &&\n          !this.state.allowedNumbers.has(i + 1));\n      const isHightlight =\n        !isHidden &&\n        this.props.hasHelp &&\n        this.state.allowedNumbers.has(i + 1) &&\n        (this.state.allowedNumbers.size === 1 ||\n          this.state.allowedNumbersFreqEqOne.has(i + 1));\n      numbers.push(\n        <Number\n          key={`CellNumber-${this.props.number}-${i + 1}`}\n          value={i + 1}\n          isActive={isActive}\n          isProtected={isProtected}\n          isHightlight={isHightlight}\n          isHidden={isHidden}\n          handleClick={this.handleClickOnNumber}\n        ></Number>\n      );\n    }\n\n    return <div className={`Cell GridCell`}>{numbers}</div>;\n  }\n}\n\nclass Error extends React.Component {\n  render() {\n    return <div className=\"Error\">!</div>;\n  }\n}\n\nclass Number extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    if (!this.props.isProtected) {\n      this.props.handleClick(this.props.value);\n    }\n  }\n\n  renderNumber() {\n    return (\n      <button\n        className={`CellNumber ${this.props.isActive ? \"active\" : \"\"} ${\n          this.props.isHightlight ? \"highlight\" : \"\"\n        } ${this.props.isProtected ? \"protected\" : \"\"} ${\n          !this.props.isHidden && !this.props.isProtected ? \"visible\" : \"\"\n        }  ${\n          this.props.isActive && this.props.value % 3 === 0\n            ? \"active-shift-l\"\n            : \"\"\n        } ${\n          this.props.isActive && (this.props.value + 2) % 3 === 0\n            ? \"active-shift-r\"\n            : \"\"\n        } ${\n          this.props.isActive && this.props.value < 4 ? \"active-shift-b\" : \"\"\n        } ${this.props.isActive && this.props.value > 6 ? \"active-shift-t\" : \"\"}\n        ${\n          this.props.isActive &&\n          this.props.value < 4 &&\n          (this.props.value + 2) % 3 === 0\n            ? \"active-shift-br\"\n            : \"\"\n        }\n        ${\n          this.props.isActive &&\n          this.props.value < 4 &&\n          this.props.value % 3 === 0\n            ? \"active-shift-bl\"\n            : \"\"\n        }\n        ${\n          this.props.isActive &&\n          this.props.value > 6 &&\n          (this.props.value + 2) % 3 === 0\n            ? \"active-shift-tr\"\n            : \"\"\n        }\n        ${\n          this.props.isActive &&\n          this.props.value > 6 &&\n          this.props.value % 3 === 0\n            ? \"active-shift-tl\"\n            : \"\"\n        }`}\n        onClick={\n          this.props.isProtected || this.props.isHidden\n            ? () => {}\n            : this.handleClick\n        }\n        value={this.props.value}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n\n  render() {\n    return this.renderNumber();\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\n\nimport Board from \"./Board\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <Board />\n    {/* <TodoCount todos={todos} />\n      <TodoList todos={todos} />\n      <AddTodo setTodos={setTodos} /> */}\n  </React.StrictMode>\n);\n"],"sourceRoot":""}